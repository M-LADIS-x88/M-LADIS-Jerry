// generated from rosidl_adapter/resource/msg.idl.em
// with input from lidar_slam/msg/SlamCommand.msg
// generated code does not contain a copyright notice


module lidar_slam {
  module msg {
    module SlamCommand_Constants {
      @verbatim (language="comment", text=
        "==============================================================================" "\n"        "Commands description :" "\n"        "Disable/enable SLAM maps update with new frames keypoints. This can be useful" "\n"        "if we want to keep the pose graph optimized SLAM map" "\n"        "or any initially loaded map untouched")
      const uint8 DISABLE_SLAM_MAP_UPDATE = 8;
      const uint8 ENABLE_SLAM_MAP_EXPANSION = 9;
      const uint8 ENABLE_SLAM_MAP_UPDATE = 10;
      @verbatim (language="comment", text=
        "Reset slam trajectory from a trajectory file")
      const uint8 RESET_TRAJECTORY = 11;
      @verbatim (language="comment", text=
        "Reset the SLAM state. Clear the maps and the trajectory, set the current pose to origin.")
      const uint8 RESET_SLAM = 12;
      @verbatim (language="comment", text=
        "Enable/Disable the SLAM process")
      const uint8 SWITCH_ON_OFF = 13;
      @verbatim (language="comment", text=
        "Save the current trajectory tracking base frame as csv file")
      const uint8 SAVE_TRAJECTORY = 14;
      @verbatim (language="comment", text=
        "Save the current trajectory tracking the main Lidar frame as csv file")
      const uint8 SAVE_LIDAR_TRAJECTORY = 15;
      @verbatim (language="comment", text=
        "Save/Load keypoints maps (edges, planes and blobs if used) to/from disk." "\n"        "Use 'string_arg' to indicate path prefix of maps : \"/path/to/slam_map_\" will" "\n"        "save/load to \"/path/to/slam_map_edges.pcd\", \"/path/to/slam_map_planes.pcd\"" "\n"        "and \"/path/to/slam_map_blobs.pcd\"." "\n"        "WARNING : this process is not real time.")
      const uint8 SAVE_KEYPOINTS_MAPS = 16;
      const uint8 SAVE_FILTERED_KEYPOINTS_MAPS = 17;
      const uint8 LOAD_KEYPOINTS_MAPS = 18;
      @verbatim (language="comment", text=
        "Stop the slam and optimize pose graph" "\n"        "The pose graph optimization is done via g2o, fusing SLAM, GPS and or landmarks detections." "\n"        "If logging is enabled, SLAM maps will also" "\n"        "be updated. This allows to correct SLAM drift and to link more precisely" "\n"        "SLAM odometry frame to GPS world/map frame." "\n"        "WARNING : this process is not real time.")
      const uint8 OPTIMIZE_GRAPH = 20;
      @verbatim (language="comment", text=
        "Add loop closure indices from an external file" "\n"        "containing query frame indices and revisited frame indices" "\n"        "The file should be a csv file with fields queryIdx and revisitedIdx")
      const uint8 LOAD_LOOP_INDICES = 23;
      @verbatim (language="comment", text=
        "Enable/Disable an external sensor" "\n"        "If enabled, sensor data are received and stored to then be processed." "\n"        "External sensor data can be used in the local optimization or in" "\n"        "a pose graph optimization in a postprocess manner" "\n"        "Use 'string_arg' to tell which sensor should be activated" "\n"        "options are :" "\n"        "  * WHEEL_ENCODER : \"0\"" "\n"        "  * IMU : \"1\"" "\n"        "  * LANDMARK_DETECTOR : \"2\"" "\n"        "  * GPS : \"3\"" "\n"        "  * POSE : \"4\"" "\n"        "  * CAMERA : \"5\"")
      const uint8 SWITCH_SENSOR = 25;
      @verbatim (language="comment", text=
        "Launch a calibration process using the current SLAM trajectory" "\n"        "and a file containing an external trajectory captured at the same time" "\n"        "The file should be a csv file with fields time,x,y,z,x0,y0,z0,x1,y1,z1,x2,y2,z2" "\n"        "xi being the first element of the ith column of the rotation matrix" "\n"        "and the first line should contain the ID of the frame tracked in the file's trajectory" "\n"        "It publishes a static TF between the base frame and the" "\n"        "frame tracked by the external trajectory" "\n"        "Only an overlapping part of trajectories is necessary to compute" "\n"        "the calibration")
      const uint8 CALIBRATE_WITH_POSES = 30;
      @verbatim (language="comment", text=
        "Load poses from an external file when using the" "\n"        "package in replay (post-process)" "\n"        "This command takes an argument as a file path to a file." "\n"        "The file should be CSV with fields : time,x,y,z,x0,y0,z0,x1,y1,z1,x2,y2,z2" "\n"        "xi being the first element of the ith column of the rotation matrix" "\n"        "These poses can be used for de-skewing the input points," "\n"        "to supply a prior motion to the registration algorithm" "\n"        "and as a contraint in the SLAM optimization." "\n"        "It can also be used to optimize a pose graph." "\n"        "The calibration between \"ext_pose_sensor\" and the" "\n"        "SLAM tracked pose should be in the TF tree" "\n"        "It can also be estimated using the calibrate command")
      const uint8 LOAD_POSES = 40;
    };
    @verbatim (language="comment", text=
      "The ID of the command to run.")
    struct SlamCommand {
      uint8 command;

      @verbatim (language="comment", text=
        "Optional string argument")
      string string_arg;
    };
  };
};
